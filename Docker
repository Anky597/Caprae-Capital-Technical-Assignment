# Use an official Python runtime as a parent image
# Using 3.11 slim for a smaller base image
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    # Set DEBIAN_FRONTEND to noninteractive to avoid prompts during apt-get install
    DEBIAN_FRONTEND=noninteractive \
    # Define standard port for HF Spaces (can be overridden but good default)
    PORT=7860 \
    # Placeholder for API key (will be overridden by HF Secrets)
    GOOGLE_API_KEY=""

# Set the working directory in the container
WORKDIR /app

# Install system dependencies required for Selenium (Chrome), Python packages, and utilities
# Update package lists, install wget, unzip, fonts, and Google Chrome stable
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    unzip \
    gnupg \
    # Fonts needed by Chrome headless
    fonts-liberation \
    libu2f-udev \
    # Install Chrome Stable
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    # --- Install ChromeDriver ---
    # 1. Find the version of Chrome installed
    && CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d'.' -f1) \
    # 2. Get the latest known good version for that major Chrome version
    # Note: This URL structure might change. Check https://googlechromelabs.github.io/chrome-for-testing/
    && CHROMEDRIVER_VERSION=$(wget -qO- "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}") \
    && echo "Using ChromeDriver version: $CHROMEDRIVER_VERSION" \
    # 3. Download and install ChromeDriver
    && wget -q --continue -P /tmp "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip" \
    && unzip -q /tmp/chromedriver-linux64.zip -d /usr/local/bin/ \
    # Remove the zip file and nested directory
    && mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/ \
    && rm -rf /tmp/chromedriver-linux64.zip /usr/local/bin/chromedriver-linux64 \
    # Ensure it's executable
    && chmod +x /usr/local/bin/chromedriver \
    # Clean up apt lists to reduce image size
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements file first to leverage Docker cache
COPY requirements.txt .

# Install Python dependencies (add gunicorn)
# Add --no-cache-dir to reduce layer size
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code into the container
COPY . .

# Expose the port the app runs on
EXPOSE ${PORT}

# Define the command to run the application using gunicorn
# Use environment variable for port binding
# Increase timeout significantly as scraping + LLM can take a long time
# Adjust workers based on available CPU/memory in the Space (start with 1 or 2)
CMD ["gunicorn", "--bind", "0.0.0.0:${PORT}", "--workers", "1", "--timeout", "600", "app:app"]